// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//===================== MODEL ==========================\\

// USER AND AUTHENTICATION
enum UserRole {
  ADMIN
  USER
  PIMPINAN
  PIC
  DALNIS
  KETUA
  ANGGOTA
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  unitKerjas   UserOnUnitKerja[]
  timEvaluasis UserOnTimEvaluasi[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// UNIT KERJA
model UnitKerja {
  id            String @id @default(cuid())
  kodeWilayah   String @db.Text
  kodeUnitKerja String @db.Text
  name          String @db.Text
  userId        String

  users UserOnUnitKerja[]
  isianLKEs LKEUnitKerja[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnUnitKerja {
  unitKerja    UnitKerja @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId  String // relation scalar field (used in the `@relation` attribute above)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime  @default(now())
  assignedRole UserRole
  timEvaluasiId String?

  @@id(name: "userUnitKerjaId",[unitKerjaId, userId])
}

// TIM EVALUASI
model TimEvaluasi {
  id     String @id @default(cuid())
  name   String @db.Text
  userId String

  users UserOnTimEvaluasi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnTimEvaluasi {
  timEvaluasi   TimEvaluasi @relation(fields: [timEvaluasiId], references: [id], onDelete: Cascade)
  timEvaluasiId String // relation scalar field (used in the `@relation` attribute above)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String // relation scalar field (used in the `@relation` attribute above)
  assignedAt    DateTime    @default(now())
  assignedRole  UserRole

  @@id(name: "userTimEvaluasiId",[timEvaluasiId, userId])
}

// PERMINDOK

// PERMINDOK UNIT KERJA

// IKU UNIT KERJA

// INDIKATOR IKU

// KKE

// KRITERIA KKE

// KKE UNIT KERJA

// LKE

// KOMPONEN LKE
model KomponenLKE {
  id String @id @default(cuid())
  kode String
  name String @unique
  tahun String
  bobot Float
  subKomponenLKE SubKomponenLKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubKomponenLKE {
  id   String @id @default(cuid())
  kode String
  name String @unique
  tahun String
  bobot Float
  komponenLKEId String?
  komponenLKE   KomponenLKE? @relation(fields: [komponenLKEId], references: [id], onDelete: Cascade)
  kriteriaLKE KriteriaLKE[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([komponenLKEId])
}
// KRITERIA LKE
model KriteriaLKE {
  id   String @id @default(cuid())
  kode String
  name String @unique
  tahun String
  bobot Float
  subKomponenLKEId String?
  subKomponenLKE   SubKomponenLKE? @relation(fields: [subKomponenLKEId], references: [id], onDelete: Cascade)
  subKriteriaLKE SubKriteriaLKE[]
  isianLKE IsianLKE?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([subKomponenLKEId])
}
model SubKriteriaLKE {
  id   String @id @default(cuid())
  kode String
  name String @unique
  tahun String
  bobot Float
  kriteriaLKEId String?
  kriteriaLKE   KriteriaLKE? @relation(fields: [kriteriaLKEId], references: [id], onDelete: Cascade)
  isianLKE IsianLKE?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([kriteriaLKEId])
}

model IsianLKE {
  id   String @id @default(cuid())
  kode String
  tahun String
  jenisIsian String
  isSubKriteria Boolean
  kriteriaLKEId String? @unique
  kriteriaLKE   KriteriaLKE? @relation(fields: [kriteriaLKEId], references: [id], onDelete: Cascade)
  subKriteriaLKEId String? @unique
  subKriteriaLKE   SubKriteriaLKE? @relation(fields: [subKriteriaLKEId], references: [id], onDelete: Cascade)
  
  unitKerjas LKEUnitKerja[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// LKE UNIT KERJA
model LKEUnitKerja {
  tahun String
  jenisIsian String
  isianKt String?
  nilaiKt String?
  isianAt String?
  CatatanKt String?
  nilaiAt String?

  isianLKE   IsianLKE @relation(fields: [IsianLKEId], references: [id], onDelete: Cascade)
  IsianLKEId String // relation scalar field (used in the `@relation` attribute above)
  unitKerja          UnitKerja        @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId        String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "LKEUnitKerjaId",[IsianLKEId, unitKerjaId])
}

//-----------------------------------------------------\\

// TEAM EXAMPLE
model Team {
  id          String  @id @default(cuid())
  userId      String
  name        String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Attachment {
  id   String @id @default(cuid())
  name String
  url  String @db.Text

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  team Team[]
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, teamId])
  @@index([teamId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
