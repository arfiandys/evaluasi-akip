// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//===================== MODEL ==========================\\

// USER AND AUTHENTICATION ================================================================================================
enum AccountRole {
  ADMIN
  USER
}

enum UserRole {
  KOORDINATOR
  PIMPINAN
  PIC
  DALNIS
  KETUA
  ANGGOTA
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          AccountRole @default(USER)

  accounts     Account[]
  unitKerjas   UserOnUnitKerja[]
  timEvaluasis UserOnTimEvaluasi[]
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// UNIT KERJA ================================================================================================
model UnitKerja {
  id             String  @id @default(cuid())
  kodeWilayah    String  @db.Text
  kodeUnitKerja  String  @db.Text
  name           String  @db.Text
  jenisUnitKerja String? // tidak perlu

  users                                         UserOnUnitKerja[]
  variabelLKEs                                  LKEUnitKerja[]
  permindoks                                    PermindokUnitKerja[]
  tujuanSasaranIndikatorIKUVariabelKKEUnitKerja TujuanSasaranIndikatorIKUVariabelKKEUnitKerja[]
  variabelKKEUnitKerja                          VariabelKKEUnitKerja[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnUnitKerja {
  unitKerja     UnitKerja @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId   String // relation scalar field (used in the `@relation` attribute above)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String // relation scalar field (used in the `@relation` attribute above)
  timEvaluasiId String?
  assignedRole  UserRole
  assignedAt    DateTime  @default(now())

  @@id(name: "userUnitKerjaId", [unitKerjaId, userId])
}

// TIM EVALUASI
model TimEvaluasi {
  id   String @id @default(cuid())
  name String @db.Text

  users UserOnTimEvaluasi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnTimEvaluasi {
  timEvaluasi   TimEvaluasi @relation(fields: [timEvaluasiId], references: [id], onDelete: Cascade)
  timEvaluasiId String // relation scalar field (used in the `@relation` attribute above)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String // relation scalar field (used in the `@relation` attribute above)
  assignedRole  UserRole
  assignedAt    DateTime    @default(now())

  @@id(name: "userTimEvaluasiId", [timEvaluasiId, userId])
}

// PERMINDOK
model Permindok {
  id    String @id @default(cuid())
  kode  String
  tahun String
  name  String

  kelompokKriteriaKKE KelompokKriteriaKKE?

  unitKerjas PermindokUnitKerja[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kode, tahun])
}

// PERMINDOK UNIT KERJA
model PermindokUnitKerja {
  url         String?
  nameDokumen String?

  permindok   Permindok @relation(fields: [permindokId], references: [id], onDelete: Cascade)
  permindokId String // relation scalar field (used in the `@relation` attribute above)
  unitKerja   UnitKerja @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "permindokUnitKerjaId", [permindokId, unitKerjaId])
}

// IKU UNIT KERJA
model IKU {
  id                        String                      @id @default(cuid())
  name                      String
  tahun                     String
  tujuanSasaranIndikatorIKU TujuanSasaranIndikatorIKU[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tahun, name])
}

// TUJUAN IKU
model TujuanSasaranIndikatorIKU {
  id    String  @id @default(cuid())
  kode  String
  nama  String
  jenis String
  IKUId String?
  IKU   IKU?    @relation(fields: [IKUId], references: [id], onDelete: Cascade)

  tujuanSasaranIndikatorIKUVariabelKKE TujuanSasaranIndikatorIKUVariabelKKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kode, IKUId])
  @@index([IKUId])
}

// KRITERIA KKE INDIKATOR IKU
model TujuanSasaranIndikatorIKUVariabelKKE {
  id       String @id @default(cuid())
  jenisIKU String

  variabelKKEId String // relation scalar field (used in the `@relation` attribute above)
  variabelKKE   VariabelKKE @relation(fields: [variabelKKEId], references: [id], onDelete: Cascade)

  tujuanSasaranIndikatorIKUId String // relation scalar field (used in the `@relation` attribute above)
  tujuanSasaranIndikatorIKU   TujuanSasaranIndikatorIKU @relation(fields: [tujuanSasaranIndikatorIKUId], references: [id], onDelete: Cascade)

  tujuanSasaranIndikatorIKUUnitKerja TujuanSasaranIndikatorIKUVariabelKKEUnitKerja[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// KK INDIKATOR KINERJA
model TujuanSasaranIndikatorIKUVariabelKKEUnitKerja {
  tahun       Int
  jenisIsian  String
  isianPIC    String?
  isianAt     String?
  isianKt     String?
  isianDalnis String?

  tujuanSasaranIndikatorIKUVariabelKKE   TujuanSasaranIndikatorIKUVariabelKKE @relation(fields: [tujuanSasaranIndikatorIKUVariabelKKEId], references: [id], onDelete: Cascade)
  tujuanSasaranIndikatorIKUVariabelKKEId String // relation scalar field (used in the `@relation` attribute above)
  unitKerja                              UnitKerja                            @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId                            String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "TujuanSasaranIndikatorIKUVariabelKKEUnitKerjaId", [tujuanSasaranIndikatorIKUVariabelKKEId, unitKerjaId])
}

// KK EVALUASI DOKUMEN
model VariabelKKEUnitKerja {
  tahun       Int
  jenisIsian  String
  isianPIC    String?
  isianAt     String?
  isianKt     String?
  isianDalnis String?

  variabelKKE   VariabelKKE @relation(fields: [variabelKKEId], references: [id], onDelete: Cascade)
  variabelKKEId String // relation scalar field (used in the `@relation` attribute above)
  unitKerja     UnitKerja   @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId   String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "VariabelKKEUnitKerjaId", [variabelKKEId, unitKerjaId])
}

// VariabelKKE
model VariabelKKE {
  id                 String  @id @default(cuid())
  tahun              Int
  jenisIsian         String
  jenisIsianIKU      String
  kode               String
  nama               String
  petunjukEvaluasi   String?
  isIndikatorKinerja Boolean

  kriteriaKKE   KriteriaKKE? @relation(fields: [kriteriaKKEId], references: [id], onDelete: Cascade)
  kriteriaKKEId String       @unique // relation scalar field (used in the `@relation` attribute above)
  variabelLKE   VariabelLKE? @relation(fields: [variabelLKEId], references: [id], onDelete: Cascade)
  variabelLKEId String       @unique // relation scalar field (used in the `@relation` attribute above)

  variabelUnitKerja                    VariabelKKEUnitKerja[]
  tujuanSasaranIndikatorIKUVariabelKKE TujuanSasaranIndikatorIKUVariabelKKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kode, tahun])
}

// KELOMPOK KRITERIA KKE
model KelompokKriteriaKKE {
  id          String        @id @default(cuid())
  kode        String
  name        String
  tahun       String
  permindok   Permindok?    @relation(fields: [permindokId], references: [id], onDelete: Cascade)
  permindokId String?       @unique
  kriteriaKKE KriteriaKKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, tahun, kode])
}

// KRITERIA KKE
model KriteriaKKE {
  id                    String              @id @default(cuid())
  kode                  String
  name                  String              @unique
  jenisIsian            String
  kelompokKriteriaKKEId String
  kelompokKriteriaKKE   KelompokKriteriaKKE @relation(fields: [kelompokKriteriaKKEId], references: [id], onDelete: Cascade)
  variabelKKE           VariabelKKE?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, kode, kelompokKriteriaKKEId])
  @@index([kelompokKriteriaKKEId])
}

// KOMPONEN LKE
model KomponenLKE {
  id             String           @id @default(cuid())
  kode           String
  name           String
  tahun          String
  bobot          Float
  subKomponenLKE SubKomponenLKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, tahun, kode])
}

// SUBKOMPONEN LKE
model SubKomponenLKE {
  id            String        @id @default(cuid())
  kode          String
  name          String        @unique
  bobot         Float
  komponenLKEId String?
  komponenLKE   KomponenLKE?  @relation(fields: [komponenLKEId], references: [id], onDelete: Cascade)
  kriteriaLKE   KriteriaLKE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, kode, komponenLKEId])
  @@index([komponenLKEId])
}

// KRITERIA LKE
model KriteriaLKE {
  id               String           @id @default(cuid())
  kode             String
  name             String           @unique
  bobot            Float
  subKomponenLKEId String?
  subKomponenLKE   SubKomponenLKE?  @relation(fields: [subKomponenLKEId], references: [id], onDelete: Cascade)
  subKriteriaLKE   SubKriteriaLKE[]
  variabelLKE      VariabelLKE?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, kode, subKomponenLKEId])
  @@index([subKomponenLKEId])
}

// SUBKRITERIA LKE
model SubKriteriaLKE {
  id            String       @id @default(cuid())
  kode          String
  name          String       @unique
  bobot         Float
  kriteriaLKEId String?
  kriteriaLKE   KriteriaLKE? @relation(fields: [kriteriaLKEId], references: [id], onDelete: Cascade)
  variabelLKE   VariabelLKE?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, kode, kriteriaLKEId])
  @@index([kriteriaLKEId])
}

// VARIABEL LKE
model VariabelLKE {
  id               String          @id @default(cuid())
  kode             String
  tahun            String
  jenisIsian       String
  catatanPositif   String?
  catatanNegatif   String?
  catatanA         String?
  catatanB         String?
  catatanC         String?
  isSubKriteria    Boolean
  kriteriaLKEId    String?         @unique
  kriteriaLKE      KriteriaLKE?    @relation(fields: [kriteriaLKEId], references: [id], onDelete: Cascade)
  subKriteriaLKEId String?         @unique
  subKriteriaLKE   SubKriteriaLKE? @relation(fields: [subKriteriaLKEId], references: [id], onDelete: Cascade)

  unitKerjas  LKEUnitKerja[]
  variabelKKE VariabelKKE?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kode, tahun])
}

// LKE UNIT KERJA
model LKEUnitKerja {
  tahun         String
  jenisIsian    String
  isianKt       String?
  nilaiKt       String?
  catatanKt     String?
  isianAt       String?
  nilaiAt       String?
  catatanAt     String?
  isianDalnis   String?
  nilaiDalnis   String?
  catatanDalnis String?

  variabelLKE   VariabelLKE @relation(fields: [variabelLKEId], references: [id], onDelete: Cascade)
  variabelLKEId String // relation scalar field (used in the `@relation` attribute above)
  unitKerja     UnitKerja   @relation(fields: [unitKerjaId], references: [id], onDelete: Cascade)
  unitKerjaId   String // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "LKEUnitKerjaId", [variabelLKEId, unitKerjaId])
}

//-----------------------------------------------------\\
